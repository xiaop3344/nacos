// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mcp/v1alpha1/metadata.proto

package istio.mcp.v1alpha1;

public final class MetadataOuterClass {
  private MetadataOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface MetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:istio.mcp.v1alpha1.Metadata)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Fully qualified name of the resource. Unique in context of a collection.
     * The fully qualified name consists of a directory and basename. The directory identifies
     * the resources location in a resource hierarchy. The basename identifies the specific
     * resource name within the context of that directory.
     * The directory and basename are composed of one or more segments. Segments must be
     * valid [DNS labels](https://tools.ietf.org/html/rfc1123). "/" is the delimiter between
     * segments
     * The rightmost segment is the basename. All segments to the
     * left of the basename form the directory. Segments moving towards the left
     * represent higher positions in the resource hierarchy, similar to reverse
     * DNS notation. e.g.
     *    /&lt;org&gt;/&lt;team&gt;/&lt;subteam&gt;/&lt;resource basename&gt;
     * An empty directory indicates a resource that is located at the root of the
     * hierarchy, e.g.
     *    /&lt;globally scoped resource&gt;
     * On Kubernetes the resource hierarchy is two-levels: namespaces and
     * cluster-scoped (i.e. global).
     * Namespace resources fully qualified name is of the form:
     *    "&lt;k8s namespace&gt;/&lt;k8s resource name&gt;"
     * Cluster scoped resources are located at the root of the hierarchy and are of the form:
     *    "/&lt;k8s resource name&gt;"
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Fully qualified name of the resource. Unique in context of a collection.
     * The fully qualified name consists of a directory and basename. The directory identifies
     * the resources location in a resource hierarchy. The basename identifies the specific
     * resource name within the context of that directory.
     * The directory and basename are composed of one or more segments. Segments must be
     * valid [DNS labels](https://tools.ietf.org/html/rfc1123). "/" is the delimiter between
     * segments
     * The rightmost segment is the basename. All segments to the
     * left of the basename form the directory. Segments moving towards the left
     * represent higher positions in the resource hierarchy, similar to reverse
     * DNS notation. e.g.
     *    /&lt;org&gt;/&lt;team&gt;/&lt;subteam&gt;/&lt;resource basename&gt;
     * An empty directory indicates a resource that is located at the root of the
     * hierarchy, e.g.
     *    /&lt;globally scoped resource&gt;
     * On Kubernetes the resource hierarchy is two-levels: namespaces and
     * cluster-scoped (i.e. global).
     * Namespace resources fully qualified name is of the form:
     *    "&lt;k8s namespace&gt;/&lt;k8s resource name&gt;"
     * Cluster scoped resources are located at the root of the hierarchy and are of the form:
     *    "/&lt;k8s resource name&gt;"
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The creation timestamp of the resource.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 2;</code>
     * @return Whether the createTime field is set.
     */
    boolean hasCreateTime();
    /**
     * <pre>
     * The creation timestamp of the resource.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 2;</code>
     * @return The createTime.
     */
    com.google.protobuf.Timestamp getCreateTime();
    /**
     * <pre>
     * The creation timestamp of the resource.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 2;</code>
     */
    com.google.protobuf.TimestampOrBuilder getCreateTimeOrBuilder();

    /**
     * <pre>
     * Resource version. This is used to determine when resources change across
     * resource updates. It should be treated as opaque by consumers/sinks.
     * </pre>
     *
     * <code>string version = 3;</code>
     * @return The version.
     */
    java.lang.String getVersion();
    /**
     * <pre>
     * Resource version. This is used to determine when resources change across
     * resource updates. It should be treated as opaque by consumers/sinks.
     * </pre>
     *
     * <code>string version = 3;</code>
     * @return The bytes for version.
     */
    com.google.protobuf.ByteString
        getVersionBytes();

    /**
     * <pre>
     * Map of string keys and values that can be used to organize and categorize
     * resources within a collection.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    int getLabelsCount();
    /**
     * <pre>
     * Map of string keys and values that can be used to organize and categorize
     * resources within a collection.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    boolean containsLabels(
        java.lang.String key);
    /**
     * Use {@link #getLabelsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getLabels();
    /**
     * <pre>
     * Map of string keys and values that can be used to organize and categorize
     * resources within a collection.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getLabelsMap();
    /**
     * <pre>
     * Map of string keys and values that can be used to organize and categorize
     * resources within a collection.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    /* nullable */
java.lang.String getLabelsOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue);
    /**
     * <pre>
     * Map of string keys and values that can be used to organize and categorize
     * resources within a collection.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    java.lang.String getLabelsOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * Map of string keys and values that can be used by source and sink to communicate
     * arbitrary metadata about this resource.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 5;</code>
     */
    int getAnnotationsCount();
    /**
     * <pre>
     * Map of string keys and values that can be used by source and sink to communicate
     * arbitrary metadata about this resource.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 5;</code>
     */
    boolean containsAnnotations(
        java.lang.String key);
    /**
     * Use {@link #getAnnotationsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getAnnotations();
    /**
     * <pre>
     * Map of string keys and values that can be used by source and sink to communicate
     * arbitrary metadata about this resource.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 5;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getAnnotationsMap();
    /**
     * <pre>
     * Map of string keys and values that can be used by source and sink to communicate
     * arbitrary metadata about this resource.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 5;</code>
     */
    /* nullable */
java.lang.String getAnnotationsOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue);
    /**
     * <pre>
     * Map of string keys and values that can be used by source and sink to communicate
     * arbitrary metadata about this resource.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 5;</code>
     */
    java.lang.String getAnnotationsOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * Metadata information that all resources within the Mesh Configuration Protocol must have.
   * </pre>
   *
   * Protobuf type {@code istio.mcp.v1alpha1.Metadata}
   */
  public static final class Metadata extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:istio.mcp.v1alpha1.Metadata)
      MetadataOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Metadata.newBuilder() to construct.
    private Metadata(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Metadata() {
      name_ = "";
      version_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Metadata();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return istio.mcp.v1alpha1.MetadataOuterClass.internal_static_istio_mcp_v1alpha1_Metadata_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetLabels();
        case 5:
          return internalGetAnnotations();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return istio.mcp.v1alpha1.MetadataOuterClass.internal_static_istio_mcp_v1alpha1_Metadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              istio.mcp.v1alpha1.MetadataOuterClass.Metadata.class, istio.mcp.v1alpha1.MetadataOuterClass.Metadata.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * Fully qualified name of the resource. Unique in context of a collection.
     * The fully qualified name consists of a directory and basename. The directory identifies
     * the resources location in a resource hierarchy. The basename identifies the specific
     * resource name within the context of that directory.
     * The directory and basename are composed of one or more segments. Segments must be
     * valid [DNS labels](https://tools.ietf.org/html/rfc1123). "/" is the delimiter between
     * segments
     * The rightmost segment is the basename. All segments to the
     * left of the basename form the directory. Segments moving towards the left
     * represent higher positions in the resource hierarchy, similar to reverse
     * DNS notation. e.g.
     *    /&lt;org&gt;/&lt;team&gt;/&lt;subteam&gt;/&lt;resource basename&gt;
     * An empty directory indicates a resource that is located at the root of the
     * hierarchy, e.g.
     *    /&lt;globally scoped resource&gt;
     * On Kubernetes the resource hierarchy is two-levels: namespaces and
     * cluster-scoped (i.e. global).
     * Namespace resources fully qualified name is of the form:
     *    "&lt;k8s namespace&gt;/&lt;k8s resource name&gt;"
     * Cluster scoped resources are located at the root of the hierarchy and are of the form:
     *    "/&lt;k8s resource name&gt;"
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Fully qualified name of the resource. Unique in context of a collection.
     * The fully qualified name consists of a directory and basename. The directory identifies
     * the resources location in a resource hierarchy. The basename identifies the specific
     * resource name within the context of that directory.
     * The directory and basename are composed of one or more segments. Segments must be
     * valid [DNS labels](https://tools.ietf.org/html/rfc1123). "/" is the delimiter between
     * segments
     * The rightmost segment is the basename. All segments to the
     * left of the basename form the directory. Segments moving towards the left
     * represent higher positions in the resource hierarchy, similar to reverse
     * DNS notation. e.g.
     *    /&lt;org&gt;/&lt;team&gt;/&lt;subteam&gt;/&lt;resource basename&gt;
     * An empty directory indicates a resource that is located at the root of the
     * hierarchy, e.g.
     *    /&lt;globally scoped resource&gt;
     * On Kubernetes the resource hierarchy is two-levels: namespaces and
     * cluster-scoped (i.e. global).
     * Namespace resources fully qualified name is of the form:
     *    "&lt;k8s namespace&gt;/&lt;k8s resource name&gt;"
     * Cluster scoped resources are located at the root of the hierarchy and are of the form:
     *    "/&lt;k8s resource name&gt;"
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CREATE_TIME_FIELD_NUMBER = 2;
    private com.google.protobuf.Timestamp createTime_;
    /**
     * <pre>
     * The creation timestamp of the resource.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 2;</code>
     * @return Whether the createTime field is set.
     */
    @java.lang.Override
    public boolean hasCreateTime() {
      return createTime_ != null;
    }
    /**
     * <pre>
     * The creation timestamp of the resource.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 2;</code>
     * @return The createTime.
     */
    @java.lang.Override
    public com.google.protobuf.Timestamp getCreateTime() {
      return createTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : createTime_;
    }
    /**
     * <pre>
     * The creation timestamp of the resource.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 2;</code>
     */
    @java.lang.Override
    public com.google.protobuf.TimestampOrBuilder getCreateTimeOrBuilder() {
      return createTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : createTime_;
    }

    public static final int VERSION_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object version_ = "";
    /**
     * <pre>
     * Resource version. This is used to determine when resources change across
     * resource updates. It should be treated as opaque by consumers/sinks.
     * </pre>
     *
     * <code>string version = 3;</code>
     * @return The version.
     */
    @java.lang.Override
    public java.lang.String getVersion() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        version_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Resource version. This is used to determine when resources change across
     * resource updates. It should be treated as opaque by consumers/sinks.
     * </pre>
     *
     * <code>string version = 3;</code>
     * @return The bytes for version.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVersionBytes() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        version_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LABELS_FIELD_NUMBER = 4;
    private static final class LabelsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  istio.mcp.v1alpha1.MetadataOuterClass.internal_static_istio_mcp_v1alpha1_Metadata_LabelsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> labels_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetLabels() {
      if (labels_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            LabelsDefaultEntryHolder.defaultEntry);
      }
      return labels_;
    }
    public int getLabelsCount() {
      return internalGetLabels().getMap().size();
    }
    /**
     * <pre>
     * Map of string keys and values that can be used to organize and categorize
     * resources within a collection.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    @java.lang.Override
    public boolean containsLabels(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetLabels().getMap().containsKey(key);
    }
    /**
     * Use {@link #getLabelsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getLabels() {
      return getLabelsMap();
    }
    /**
     * <pre>
     * Map of string keys and values that can be used to organize and categorize
     * resources within a collection.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getLabelsMap() {
      return internalGetLabels().getMap();
    }
    /**
     * <pre>
     * Map of string keys and values that can be used to organize and categorize
     * resources within a collection.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    @java.lang.Override
    public /* nullable */
java.lang.String getLabelsOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetLabels().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Map of string keys and values that can be used to organize and categorize
     * resources within a collection.
     * </pre>
     *
     * <code>map&lt;string, string&gt; labels = 4;</code>
     */
    @java.lang.Override
    public java.lang.String getLabelsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetLabels().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int ANNOTATIONS_FIELD_NUMBER = 5;
    private static final class AnnotationsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  istio.mcp.v1alpha1.MetadataOuterClass.internal_static_istio_mcp_v1alpha1_Metadata_AnnotationsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> annotations_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetAnnotations() {
      if (annotations_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AnnotationsDefaultEntryHolder.defaultEntry);
      }
      return annotations_;
    }
    public int getAnnotationsCount() {
      return internalGetAnnotations().getMap().size();
    }
    /**
     * <pre>
     * Map of string keys and values that can be used by source and sink to communicate
     * arbitrary metadata about this resource.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 5;</code>
     */
    @java.lang.Override
    public boolean containsAnnotations(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetAnnotations().getMap().containsKey(key);
    }
    /**
     * Use {@link #getAnnotationsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getAnnotations() {
      return getAnnotationsMap();
    }
    /**
     * <pre>
     * Map of string keys and values that can be used by source and sink to communicate
     * arbitrary metadata about this resource.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 5;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getAnnotationsMap() {
      return internalGetAnnotations().getMap();
    }
    /**
     * <pre>
     * Map of string keys and values that can be used by source and sink to communicate
     * arbitrary metadata about this resource.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 5;</code>
     */
    @java.lang.Override
    public /* nullable */
java.lang.String getAnnotationsOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAnnotations().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Map of string keys and values that can be used by source and sink to communicate
     * arbitrary metadata about this resource.
     * </pre>
     *
     * <code>map&lt;string, string&gt; annotations = 5;</code>
     */
    @java.lang.Override
    public java.lang.String getAnnotationsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAnnotations().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (createTime_ != null) {
        output.writeMessage(2, getCreateTime());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(version_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, version_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetLabels(),
          LabelsDefaultEntryHolder.defaultEntry,
          4);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetAnnotations(),
          AnnotationsDefaultEntryHolder.defaultEntry,
          5);
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (createTime_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCreateTime());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(version_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, version_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetLabels().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        labels__ = LabelsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, labels__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetAnnotations().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        annotations__ = AnnotationsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, annotations__);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof istio.mcp.v1alpha1.MetadataOuterClass.Metadata)) {
        return super.equals(obj);
      }
      istio.mcp.v1alpha1.MetadataOuterClass.Metadata other = (istio.mcp.v1alpha1.MetadataOuterClass.Metadata) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (hasCreateTime() != other.hasCreateTime()) return false;
      if (hasCreateTime()) {
        if (!getCreateTime()
            .equals(other.getCreateTime())) return false;
      }
      if (!getVersion()
          .equals(other.getVersion())) return false;
      if (!internalGetLabels().equals(
          other.internalGetLabels())) return false;
      if (!internalGetAnnotations().equals(
          other.internalGetAnnotations())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (hasCreateTime()) {
        hash = (37 * hash) + CREATE_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getCreateTime().hashCode();
      }
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getVersion().hashCode();
      if (!internalGetLabels().getMap().isEmpty()) {
        hash = (37 * hash) + LABELS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetLabels().hashCode();
      }
      if (!internalGetAnnotations().getMap().isEmpty()) {
        hash = (37 * hash) + ANNOTATIONS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetAnnotations().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static istio.mcp.v1alpha1.MetadataOuterClass.Metadata parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static istio.mcp.v1alpha1.MetadataOuterClass.Metadata parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static istio.mcp.v1alpha1.MetadataOuterClass.Metadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static istio.mcp.v1alpha1.MetadataOuterClass.Metadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static istio.mcp.v1alpha1.MetadataOuterClass.Metadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static istio.mcp.v1alpha1.MetadataOuterClass.Metadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static istio.mcp.v1alpha1.MetadataOuterClass.Metadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static istio.mcp.v1alpha1.MetadataOuterClass.Metadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static istio.mcp.v1alpha1.MetadataOuterClass.Metadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static istio.mcp.v1alpha1.MetadataOuterClass.Metadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static istio.mcp.v1alpha1.MetadataOuterClass.Metadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static istio.mcp.v1alpha1.MetadataOuterClass.Metadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(istio.mcp.v1alpha1.MetadataOuterClass.Metadata prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Metadata information that all resources within the Mesh Configuration Protocol must have.
     * </pre>
     *
     * Protobuf type {@code istio.mcp.v1alpha1.Metadata}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:istio.mcp.v1alpha1.Metadata)
        istio.mcp.v1alpha1.MetadataOuterClass.MetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return istio.mcp.v1alpha1.MetadataOuterClass.internal_static_istio_mcp_v1alpha1_Metadata_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetLabels();
          case 5:
            return internalGetAnnotations();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 4:
            return internalGetMutableLabels();
          case 5:
            return internalGetMutableAnnotations();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return istio.mcp.v1alpha1.MetadataOuterClass.internal_static_istio_mcp_v1alpha1_Metadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                istio.mcp.v1alpha1.MetadataOuterClass.Metadata.class, istio.mcp.v1alpha1.MetadataOuterClass.Metadata.Builder.class);
      }

      // Construct using istio.mcp.v1alpha1.MetadataOuterClass.Metadata.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        name_ = "";
        createTime_ = null;
        if (createTimeBuilder_ != null) {
          createTimeBuilder_.dispose();
          createTimeBuilder_ = null;
        }
        version_ = "";
        internalGetMutableLabels().clear();
        internalGetMutableAnnotations().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return istio.mcp.v1alpha1.MetadataOuterClass.internal_static_istio_mcp_v1alpha1_Metadata_descriptor;
      }

      @java.lang.Override
      public istio.mcp.v1alpha1.MetadataOuterClass.Metadata getDefaultInstanceForType() {
        return istio.mcp.v1alpha1.MetadataOuterClass.Metadata.getDefaultInstance();
      }

      @java.lang.Override
      public istio.mcp.v1alpha1.MetadataOuterClass.Metadata build() {
        istio.mcp.v1alpha1.MetadataOuterClass.Metadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public istio.mcp.v1alpha1.MetadataOuterClass.Metadata buildPartial() {
        istio.mcp.v1alpha1.MetadataOuterClass.Metadata result = new istio.mcp.v1alpha1.MetadataOuterClass.Metadata(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(istio.mcp.v1alpha1.MetadataOuterClass.Metadata result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.name_ = name_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.createTime_ = createTimeBuilder_ == null
              ? createTime_
              : createTimeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.version_ = version_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.labels_ = internalGetLabels();
          result.labels_.makeImmutable();
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.annotations_ = internalGetAnnotations();
          result.annotations_.makeImmutable();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof istio.mcp.v1alpha1.MetadataOuterClass.Metadata) {
          return mergeFrom((istio.mcp.v1alpha1.MetadataOuterClass.Metadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(istio.mcp.v1alpha1.MetadataOuterClass.Metadata other) {
        if (other == istio.mcp.v1alpha1.MetadataOuterClass.Metadata.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasCreateTime()) {
          mergeCreateTime(other.getCreateTime());
        }
        if (!other.getVersion().isEmpty()) {
          version_ = other.version_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        internalGetMutableLabels().mergeFrom(
            other.internalGetLabels());
        bitField0_ |= 0x00000008;
        internalGetMutableAnnotations().mergeFrom(
            other.internalGetAnnotations());
        bitField0_ |= 0x00000010;
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getCreateTimeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                version_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
                labels__ = input.readMessage(
                    LabelsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableLabels().getMutableMap().put(
                    labels__.getKey(), labels__.getValue());
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
                annotations__ = input.readMessage(
                    AnnotationsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableAnnotations().getMutableMap().put(
                    annotations__.getKey(), annotations__.getValue());
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Fully qualified name of the resource. Unique in context of a collection.
       * The fully qualified name consists of a directory and basename. The directory identifies
       * the resources location in a resource hierarchy. The basename identifies the specific
       * resource name within the context of that directory.
       * The directory and basename are composed of one or more segments. Segments must be
       * valid [DNS labels](https://tools.ietf.org/html/rfc1123). "/" is the delimiter between
       * segments
       * The rightmost segment is the basename. All segments to the
       * left of the basename form the directory. Segments moving towards the left
       * represent higher positions in the resource hierarchy, similar to reverse
       * DNS notation. e.g.
       *    /&lt;org&gt;/&lt;team&gt;/&lt;subteam&gt;/&lt;resource basename&gt;
       * An empty directory indicates a resource that is located at the root of the
       * hierarchy, e.g.
       *    /&lt;globally scoped resource&gt;
       * On Kubernetes the resource hierarchy is two-levels: namespaces and
       * cluster-scoped (i.e. global).
       * Namespace resources fully qualified name is of the form:
       *    "&lt;k8s namespace&gt;/&lt;k8s resource name&gt;"
       * Cluster scoped resources are located at the root of the hierarchy and are of the form:
       *    "/&lt;k8s resource name&gt;"
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Fully qualified name of the resource. Unique in context of a collection.
       * The fully qualified name consists of a directory and basename. The directory identifies
       * the resources location in a resource hierarchy. The basename identifies the specific
       * resource name within the context of that directory.
       * The directory and basename are composed of one or more segments. Segments must be
       * valid [DNS labels](https://tools.ietf.org/html/rfc1123). "/" is the delimiter between
       * segments
       * The rightmost segment is the basename. All segments to the
       * left of the basename form the directory. Segments moving towards the left
       * represent higher positions in the resource hierarchy, similar to reverse
       * DNS notation. e.g.
       *    /&lt;org&gt;/&lt;team&gt;/&lt;subteam&gt;/&lt;resource basename&gt;
       * An empty directory indicates a resource that is located at the root of the
       * hierarchy, e.g.
       *    /&lt;globally scoped resource&gt;
       * On Kubernetes the resource hierarchy is two-levels: namespaces and
       * cluster-scoped (i.e. global).
       * Namespace resources fully qualified name is of the form:
       *    "&lt;k8s namespace&gt;/&lt;k8s resource name&gt;"
       * Cluster scoped resources are located at the root of the hierarchy and are of the form:
       *    "/&lt;k8s resource name&gt;"
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Fully qualified name of the resource. Unique in context of a collection.
       * The fully qualified name consists of a directory and basename. The directory identifies
       * the resources location in a resource hierarchy. The basename identifies the specific
       * resource name within the context of that directory.
       * The directory and basename are composed of one or more segments. Segments must be
       * valid [DNS labels](https://tools.ietf.org/html/rfc1123). "/" is the delimiter between
       * segments
       * The rightmost segment is the basename. All segments to the
       * left of the basename form the directory. Segments moving towards the left
       * represent higher positions in the resource hierarchy, similar to reverse
       * DNS notation. e.g.
       *    /&lt;org&gt;/&lt;team&gt;/&lt;subteam&gt;/&lt;resource basename&gt;
       * An empty directory indicates a resource that is located at the root of the
       * hierarchy, e.g.
       *    /&lt;globally scoped resource&gt;
       * On Kubernetes the resource hierarchy is two-levels: namespaces and
       * cluster-scoped (i.e. global).
       * Namespace resources fully qualified name is of the form:
       *    "&lt;k8s namespace&gt;/&lt;k8s resource name&gt;"
       * Cluster scoped resources are located at the root of the hierarchy and are of the form:
       *    "/&lt;k8s resource name&gt;"
       * </pre>
       *
       * <code>string name = 1;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Fully qualified name of the resource. Unique in context of a collection.
       * The fully qualified name consists of a directory and basename. The directory identifies
       * the resources location in a resource hierarchy. The basename identifies the specific
       * resource name within the context of that directory.
       * The directory and basename are composed of one or more segments. Segments must be
       * valid [DNS labels](https://tools.ietf.org/html/rfc1123). "/" is the delimiter between
       * segments
       * The rightmost segment is the basename. All segments to the
       * left of the basename form the directory. Segments moving towards the left
       * represent higher positions in the resource hierarchy, similar to reverse
       * DNS notation. e.g.
       *    /&lt;org&gt;/&lt;team&gt;/&lt;subteam&gt;/&lt;resource basename&gt;
       * An empty directory indicates a resource that is located at the root of the
       * hierarchy, e.g.
       *    /&lt;globally scoped resource&gt;
       * On Kubernetes the resource hierarchy is two-levels: namespaces and
       * cluster-scoped (i.e. global).
       * Namespace resources fully qualified name is of the form:
       *    "&lt;k8s namespace&gt;/&lt;k8s resource name&gt;"
       * Cluster scoped resources are located at the root of the hierarchy and are of the form:
       *    "/&lt;k8s resource name&gt;"
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Fully qualified name of the resource. Unique in context of a collection.
       * The fully qualified name consists of a directory and basename. The directory identifies
       * the resources location in a resource hierarchy. The basename identifies the specific
       * resource name within the context of that directory.
       * The directory and basename are composed of one or more segments. Segments must be
       * valid [DNS labels](https://tools.ietf.org/html/rfc1123). "/" is the delimiter between
       * segments
       * The rightmost segment is the basename. All segments to the
       * left of the basename form the directory. Segments moving towards the left
       * represent higher positions in the resource hierarchy, similar to reverse
       * DNS notation. e.g.
       *    /&lt;org&gt;/&lt;team&gt;/&lt;subteam&gt;/&lt;resource basename&gt;
       * An empty directory indicates a resource that is located at the root of the
       * hierarchy, e.g.
       *    /&lt;globally scoped resource&gt;
       * On Kubernetes the resource hierarchy is two-levels: namespaces and
       * cluster-scoped (i.e. global).
       * Namespace resources fully qualified name is of the form:
       *    "&lt;k8s namespace&gt;/&lt;k8s resource name&gt;"
       * Cluster scoped resources are located at the root of the hierarchy and are of the form:
       *    "/&lt;k8s resource name&gt;"
       * </pre>
       *
       * <code>string name = 1;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.google.protobuf.Timestamp createTime_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> createTimeBuilder_;
      /**
       * <pre>
       * The creation timestamp of the resource.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp create_time = 2;</code>
       * @return Whether the createTime field is set.
       */
      public boolean hasCreateTime() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The creation timestamp of the resource.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp create_time = 2;</code>
       * @return The createTime.
       */
      public com.google.protobuf.Timestamp getCreateTime() {
        if (createTimeBuilder_ == null) {
          return createTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : createTime_;
        } else {
          return createTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The creation timestamp of the resource.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp create_time = 2;</code>
       */
      public Builder setCreateTime(com.google.protobuf.Timestamp value) {
        if (createTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          createTime_ = value;
        } else {
          createTimeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The creation timestamp of the resource.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp create_time = 2;</code>
       */
      public Builder setCreateTime(
          com.google.protobuf.Timestamp.Builder builderForValue) {
        if (createTimeBuilder_ == null) {
          createTime_ = builderForValue.build();
        } else {
          createTimeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The creation timestamp of the resource.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp create_time = 2;</code>
       */
      public Builder mergeCreateTime(com.google.protobuf.Timestamp value) {
        if (createTimeBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            createTime_ != null &&
            createTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
            getCreateTimeBuilder().mergeFrom(value);
          } else {
            createTime_ = value;
          }
        } else {
          createTimeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The creation timestamp of the resource.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp create_time = 2;</code>
       */
      public Builder clearCreateTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        createTime_ = null;
        if (createTimeBuilder_ != null) {
          createTimeBuilder_.dispose();
          createTimeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The creation timestamp of the resource.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp create_time = 2;</code>
       */
      public com.google.protobuf.Timestamp.Builder getCreateTimeBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getCreateTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The creation timestamp of the resource.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp create_time = 2;</code>
       */
      public com.google.protobuf.TimestampOrBuilder getCreateTimeOrBuilder() {
        if (createTimeBuilder_ != null) {
          return createTimeBuilder_.getMessageOrBuilder();
        } else {
          return createTime_ == null ?
              com.google.protobuf.Timestamp.getDefaultInstance() : createTime_;
        }
      }
      /**
       * <pre>
       * The creation timestamp of the resource.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp create_time = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
          getCreateTimeFieldBuilder() {
        if (createTimeBuilder_ == null) {
          createTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                  getCreateTime(),
                  getParentForChildren(),
                  isClean());
          createTime_ = null;
        }
        return createTimeBuilder_;
      }

      private java.lang.Object version_ = "";
      /**
       * <pre>
       * Resource version. This is used to determine when resources change across
       * resource updates. It should be treated as opaque by consumers/sinks.
       * </pre>
       *
       * <code>string version = 3;</code>
       * @return The version.
       */
      public java.lang.String getVersion() {
        java.lang.Object ref = version_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          version_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Resource version. This is used to determine when resources change across
       * resource updates. It should be treated as opaque by consumers/sinks.
       * </pre>
       *
       * <code>string version = 3;</code>
       * @return The bytes for version.
       */
      public com.google.protobuf.ByteString
          getVersionBytes() {
        java.lang.Object ref = version_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          version_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Resource version. This is used to determine when resources change across
       * resource updates. It should be treated as opaque by consumers/sinks.
       * </pre>
       *
       * <code>string version = 3;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        version_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Resource version. This is used to determine when resources change across
       * resource updates. It should be treated as opaque by consumers/sinks.
       * </pre>
       *
       * <code>string version = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        version_ = getDefaultInstance().getVersion();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Resource version. This is used to determine when resources change across
       * resource updates. It should be treated as opaque by consumers/sinks.
       * </pre>
       *
       * <code>string version = 3;</code>
       * @param value The bytes for version to set.
       * @return This builder for chaining.
       */
      public Builder setVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        version_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> labels_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
          internalGetLabels() {
        if (labels_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              LabelsDefaultEntryHolder.defaultEntry);
        }
        return labels_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
          internalGetMutableLabels() {
        if (labels_ == null) {
          labels_ = com.google.protobuf.MapField.newMapField(
              LabelsDefaultEntryHolder.defaultEntry);
        }
        if (!labels_.isMutable()) {
          labels_ = labels_.copy();
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return labels_;
      }
      public int getLabelsCount() {
        return internalGetLabels().getMap().size();
      }
      /**
       * <pre>
       * Map of string keys and values that can be used to organize and categorize
       * resources within a collection.
       * </pre>
       *
       * <code>map&lt;string, string&gt; labels = 4;</code>
       */
      @java.lang.Override
      public boolean containsLabels(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetLabels().getMap().containsKey(key);
      }
      /**
       * Use {@link #getLabelsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getLabels() {
        return getLabelsMap();
      }
      /**
       * <pre>
       * Map of string keys and values that can be used to organize and categorize
       * resources within a collection.
       * </pre>
       *
       * <code>map&lt;string, string&gt; labels = 4;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.String> getLabelsMap() {
        return internalGetLabels().getMap();
      }
      /**
       * <pre>
       * Map of string keys and values that can be used to organize and categorize
       * resources within a collection.
       * </pre>
       *
       * <code>map&lt;string, string&gt; labels = 4;</code>
       */
      @java.lang.Override
      public /* nullable */
java.lang.String getLabelsOrDefault(
          java.lang.String key,
          /* nullable */
java.lang.String defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetLabels().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Map of string keys and values that can be used to organize and categorize
       * resources within a collection.
       * </pre>
       *
       * <code>map&lt;string, string&gt; labels = 4;</code>
       */
      @java.lang.Override
      public java.lang.String getLabelsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetLabels().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearLabels() {
        bitField0_ = (bitField0_ & ~0x00000008);
        internalGetMutableLabels().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * Map of string keys and values that can be used to organize and categorize
       * resources within a collection.
       * </pre>
       *
       * <code>map&lt;string, string&gt; labels = 4;</code>
       */
      public Builder removeLabels(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableLabels().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
          getMutableLabels() {
        bitField0_ |= 0x00000008;
        return internalGetMutableLabels().getMutableMap();
      }
      /**
       * <pre>
       * Map of string keys and values that can be used to organize and categorize
       * resources within a collection.
       * </pre>
       *
       * <code>map&lt;string, string&gt; labels = 4;</code>
       */
      public Builder putLabels(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) { throw new NullPointerException("map value"); }
        internalGetMutableLabels().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * Map of string keys and values that can be used to organize and categorize
       * resources within a collection.
       * </pre>
       *
       * <code>map&lt;string, string&gt; labels = 4;</code>
       */
      public Builder putAllLabels(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableLabels().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000008;
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> annotations_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
          internalGetAnnotations() {
        if (annotations_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              AnnotationsDefaultEntryHolder.defaultEntry);
        }
        return annotations_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
          internalGetMutableAnnotations() {
        if (annotations_ == null) {
          annotations_ = com.google.protobuf.MapField.newMapField(
              AnnotationsDefaultEntryHolder.defaultEntry);
        }
        if (!annotations_.isMutable()) {
          annotations_ = annotations_.copy();
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return annotations_;
      }
      public int getAnnotationsCount() {
        return internalGetAnnotations().getMap().size();
      }
      /**
       * <pre>
       * Map of string keys and values that can be used by source and sink to communicate
       * arbitrary metadata about this resource.
       * </pre>
       *
       * <code>map&lt;string, string&gt; annotations = 5;</code>
       */
      @java.lang.Override
      public boolean containsAnnotations(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetAnnotations().getMap().containsKey(key);
      }
      /**
       * Use {@link #getAnnotationsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getAnnotations() {
        return getAnnotationsMap();
      }
      /**
       * <pre>
       * Map of string keys and values that can be used by source and sink to communicate
       * arbitrary metadata about this resource.
       * </pre>
       *
       * <code>map&lt;string, string&gt; annotations = 5;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.String> getAnnotationsMap() {
        return internalGetAnnotations().getMap();
      }
      /**
       * <pre>
       * Map of string keys and values that can be used by source and sink to communicate
       * arbitrary metadata about this resource.
       * </pre>
       *
       * <code>map&lt;string, string&gt; annotations = 5;</code>
       */
      @java.lang.Override
      public /* nullable */
java.lang.String getAnnotationsOrDefault(
          java.lang.String key,
          /* nullable */
java.lang.String defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetAnnotations().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Map of string keys and values that can be used by source and sink to communicate
       * arbitrary metadata about this resource.
       * </pre>
       *
       * <code>map&lt;string, string&gt; annotations = 5;</code>
       */
      @java.lang.Override
      public java.lang.String getAnnotationsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetAnnotations().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearAnnotations() {
        bitField0_ = (bitField0_ & ~0x00000010);
        internalGetMutableAnnotations().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * Map of string keys and values that can be used by source and sink to communicate
       * arbitrary metadata about this resource.
       * </pre>
       *
       * <code>map&lt;string, string&gt; annotations = 5;</code>
       */
      public Builder removeAnnotations(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableAnnotations().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
          getMutableAnnotations() {
        bitField0_ |= 0x00000010;
        return internalGetMutableAnnotations().getMutableMap();
      }
      /**
       * <pre>
       * Map of string keys and values that can be used by source and sink to communicate
       * arbitrary metadata about this resource.
       * </pre>
       *
       * <code>map&lt;string, string&gt; annotations = 5;</code>
       */
      public Builder putAnnotations(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) { throw new NullPointerException("map value"); }
        internalGetMutableAnnotations().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <pre>
       * Map of string keys and values that can be used by source and sink to communicate
       * arbitrary metadata about this resource.
       * </pre>
       *
       * <code>map&lt;string, string&gt; annotations = 5;</code>
       */
      public Builder putAllAnnotations(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableAnnotations().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000010;
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:istio.mcp.v1alpha1.Metadata)
    }

    // @@protoc_insertion_point(class_scope:istio.mcp.v1alpha1.Metadata)
    private static final istio.mcp.v1alpha1.MetadataOuterClass.Metadata DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new istio.mcp.v1alpha1.MetadataOuterClass.Metadata();
    }

    public static istio.mcp.v1alpha1.MetadataOuterClass.Metadata getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Metadata>
        PARSER = new com.google.protobuf.AbstractParser<Metadata>() {
      @java.lang.Override
      public Metadata parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Metadata> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Metadata> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public istio.mcp.v1alpha1.MetadataOuterClass.Metadata getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_istio_mcp_v1alpha1_Metadata_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_istio_mcp_v1alpha1_Metadata_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_istio_mcp_v1alpha1_Metadata_LabelsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_istio_mcp_v1alpha1_Metadata_LabelsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_istio_mcp_v1alpha1_Metadata_AnnotationsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_istio_mcp_v1alpha1_Metadata_AnnotationsEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\033mcp/v1alpha1/metadata.proto\022\022istio.mcp" +
      ".v1alpha1\032\024gogoproto/gogo.proto\032\037google/" +
      "protobuf/timestamp.proto\"\273\002\n\010Metadata\022\014\n" +
      "\004name\030\001 \001(\t\022/\n\013create_time\030\002 \001(\0132\032.googl" +
      "e.protobuf.Timestamp\022\017\n\007version\030\003 \001(\t\0228\n" +
      "\006labels\030\004 \003(\0132(.istio.mcp.v1alpha1.Metad" +
      "ata.LabelsEntry\022B\n\013annotations\030\005 \003(\0132-.i" +
      "stio.mcp.v1alpha1.Metadata.AnnotationsEn" +
      "try\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value" +
      "\030\002 \001(\t:\0028\001\0322\n\020AnnotationsEntry\022\013\n\003key\030\001 " +
      "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\037Z\031istio.io/api/m" +
      "cp/v1alpha1\250\342\036\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.GoGoProtos.getDescriptor(),
          com.google.protobuf.TimestampProto.getDescriptor(),
        });
    internal_static_istio_mcp_v1alpha1_Metadata_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_istio_mcp_v1alpha1_Metadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_istio_mcp_v1alpha1_Metadata_descriptor,
        new java.lang.String[] { "Name", "CreateTime", "Version", "Labels", "Annotations", });
    internal_static_istio_mcp_v1alpha1_Metadata_LabelsEntry_descriptor =
      internal_static_istio_mcp_v1alpha1_Metadata_descriptor.getNestedTypes().get(0);
    internal_static_istio_mcp_v1alpha1_Metadata_LabelsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_istio_mcp_v1alpha1_Metadata_LabelsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_istio_mcp_v1alpha1_Metadata_AnnotationsEntry_descriptor =
      internal_static_istio_mcp_v1alpha1_Metadata_descriptor.getNestedTypes().get(1);
    internal_static_istio_mcp_v1alpha1_Metadata_AnnotationsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_istio_mcp_v1alpha1_Metadata_AnnotationsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.protobuf.GoGoProtos.equalAll);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.GoGoProtos.getDescriptor();
    com.google.protobuf.TimestampProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
